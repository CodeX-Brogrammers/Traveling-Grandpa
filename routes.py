from random import choice
import logging

from aioalice.types import AliceRequest, Image, AliceResponse
from aioalice import Dispatcher

from nlu.cases import check_user_answer, SelectCardHandler, QuessAnswerHandler
from mixin import mixin_appmetrica_log, mixin_can_repeat, mixin_state
from state import State, GameStates, HybridStorage
from schemes import RepeatKey, Diff
from const import (
    DONT_KNOW, FACT_ANYTHING_ELSE_MOMENT,
    SELECT_CARD_ANYTHING_ELSE_MOMENT,
    NEW_OR_CLOSE_GAME_BUTTONS_GROUP,
    REPEAT_OR_CLOSE_BUTTONS_GROUP,
    CONTINUE_ANYTHING_ELSE_MOMENT,
    INCORRECT_ANSWERS_COUNTRY,
    END_ANYTHING_ELSE_MOMENT,
    CONFIRM_BUTTONS_GROUP,
    MENU_BUTTONS_GROUP,
    ALL_HINTS_IS_TAKES,
    GAME_BUTTONS_GROUP,
    INCORRECT_ANSWERS,
    HINT_DONT_NEED,
    REPEAT_PLEASE, SHOW_CARDS_ANSWER, START_ANSWER,
)
import repositories
import filters
import schemes
import models
import nlu

dp = Dispatcher(storage=HybridStorage())


@dp.request_handler(filters.StartFilter(), state="*")
@mixin_appmetrica_log(dp)
@mixin_can_repeat(dp)
@mixin_state
async def handler_start(alice: AliceRequest, state: State, **kwargs):
    logging.info(f"Handler->–°—Ç–∞—Ä—Ç")
    await dp.storage.set_state(
        alice.session.user_id,
        GameStates.START,
        alice_state=state
    )
    await dp.storage.reset_data(alice.session.user_id)

    answer = START_ANSWER
    return alice.response_big_image(
        answer.src,
        tts=answer.tts,
        image_id="1652229/066bed1b217f0e2c894a",
        buttons=MENU_BUTTONS_GROUP,
        title="",
        description=answer.src
    )


@dp.request_handler(
    filters.TextContainFilter(["–∞–ª–∏—Å–∞"]),
    filters.SessionState(GameStates.START),
    state="*"
)
@mixin_appmetrica_log(dp)
async def handler_new_game(alice: AliceRequest, **kwargs):
    return alice.response(
        "–ß–¢–û-–¢–û",
        tts="""
        <speaker audio="dialogs-upload/936e66b3-1d74-4b8a-8a97-2a31f8367fb4/6efc7e21-4f28-438f-b3bb-8585d0c14dd9.opus">
        <speaker audio="dialogs-upload/936e66b3-1d74-4b8a-8a97-2a31f8367fb4/f0b8e03c-7cb0-446c-9c7e-e19dc4133f26.opus">
        –≠—Ç–æ —Å–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø—É—Ç—å –¥–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –ø–æ –≤–µ—Ä—Å–∏–∏ –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç.
        <speaker audio="alice-sounds-things-phone-1.opus">
        <speaker audio="dialogs-upload/936e66b3-1d74-4b8a-8a97-2a31f8367fb4/7acc4e36-471a-47a0-9883-3d3f3b17344a.opus">
        –ü—Ä–∏–≤–µ—Ç, –º—ã —Ä–∞–¥—ã —Ç–µ–±—è —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å, –º—ã –≤–æ—Ç –≤–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è –≤ –Ω–æ–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Ç—ã —Å –Ω–∞–º–∏ ?
        """
    )


@dp.request_handler(
    filters.SessionState(GameStates.END),
    filters.OneOfFilter(
        filters.ConfirmFilter(),
        filters.TextContainFilter(["–ù–æ–≤–∞—è", "–∏–≥—Ä–∞"]),
        filters.TextContainFilter(["—Å–Ω–∞—á–∞–ª–∞"]),
    ),
    state="*"
)
@mixin_appmetrica_log(dp)
async def handler_new_game(alice: AliceRequest, **kwargs):
    return await handler_show_cards(alice)


@dp.request_handler(
    filters.SessionState(GameStates.END),
    filters.OneOfFilter(
        filters.EndFilter(),
        filters.RejectFilter(),
        filters.TextContainFilter(["–í—ã—Ö–æ–¥"]),
        filters.TextContainFilter(["–•–≤–∞—Ç–∏—Ç"]),
        filters.TextContainFilter(["–ó–∞–∫—Ä—ã—Ç—å"])
    ),
    state="*"
)
@mixin_appmetrica_log(dp)
async def handler_close_game(alice: AliceRequest, text: str | None = None, **kwargs):
    close_text = "–ë—É–¥—É —Å–∫—É—á–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è! –° –ª—é–±–æ–≤—å—é, —Ç–≤–æ–π –¥–µ–¥—É—à–∫–∞ ‚ô•"
    if text:
        close_text = text + close_text

    return alice.response(
        close_text,
        end_session=True
    )


@dp.request_handler(
    filters.OneOfFilter(
        filters.EndFilter(),
        filters.AndFilter(
            filters.SessionState(GameStates.SHOW_CARDS),
            filters.RejectFilter()
        )
    ),
    state="*"
)
@mixin_appmetrica_log(dp)
@mixin_can_repeat(dp)
@mixin_state
async def handler_end(alice: AliceRequest, state: State = None, true_end: bool = False, **kwargs):
    logging.info(f"User: {alice.session.user_id}: Handler->–ó–∞–∫–ª—é—á–µ–Ω–∏–µ")

    if true_end:
        text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç—ã –æ—Ç–≥–∞–¥–∞–ª–∏ –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã, –≥–¥–µ –º—ã –ø–æ–±—ã–≤–∞–ª–∏ üéâ"
    else:
        text = "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —É —Ç–µ–±—è —Å–≤–æ–∏ –¥–µ–ª–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏, –∏ —è —Ü–µ–Ω—é –≤—Å—é –ø–æ–º–æ—â—å, —á—Ç–æ —Ç—ã —É–∂–µ –º–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª.\n" \
               "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —è –ø—Ä–æ–¥–æ–ª–∂—É –º–æ–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∏ –ø–æ–¥–µ–ª—é—Å—å –Ω–æ–≤–æ—Å—Ç—è–º–∏, –∫–æ–≥–¥–∞ —Ç—ã –≤–µ—Ä–Ω—ë—à—å—Å—è."

    if state.current == GameStates.START:
        return await handler_close_game(alice, text=text)

    user = await repositories.UserRepository.get(alice.session.user_id)
    score = user.score
    global_score = await repositories.UserRepository.increase_global_score(user)
    rank = await repositories.UserRepository.get_rank(user)

    text += f"\n–ó–∞ –∏–≥—Ä—É –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {score} –æ—á–∫–æ–≤." \
            f"\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤: {global_score}." \
            f"\n–í—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ {rank} –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ. –ñ–µ–ª–∞–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?"

    state.clear_after_question()
    await dp.storage.set_state(
        alice.session.user_id,
        GameStates.END,
        alice_state=state
    )

    return alice.response(
        text, buttons=NEW_OR_CLOSE_GAME_BUTTONS_GROUP,
        session_state=state.session.model_dump()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
@dp.request_handler(
    filters.RepeatFilter(),
    state="*"
)
@mixin_appmetrica_log(dp)
@mixin_state
async def handler_repeat(alice: AliceRequest, state: State):
    data = await dp.storage.get_data(alice.session.user_id)

    if state.current == GameStates.GUESS_ANSWER and nlu.calculate_coincidence(
            input_tokens=nlu.lemmatize(nlu.tokenizer(alice.request.command)),
            source_tokens=nlu.lemmatize(["–≤–æ–ø—Ä–æ—Å"])
    ) >= 1.0:
        logging.info(f"User: {alice.session.user_id}: Handler->–ü–æ–≤—Ç–æ—Ä–∏—Ç—å->–í–æ–ø—Ä–æ—Å")
        if response := data.get(RepeatKey.QUESTION.value, None):
            return response

    if (state.current == GameStates.SELECT_CARD
            and (state.session.need_repeat or nlu.calculate_coincidence(
                input_tokens=nlu.lemmatize(nlu.tokenizer(alice.request.command)),
                source_tokens=nlu.lemmatize(["–∫–∞—Ä—Ç–æ—á–∫–∏", "–∫–∞—Ä—Ç—ã"])
            ) >= 0.5)):
        state.session.need_repeat = False
        logging.info(f"User: {alice.session.user_id}: Handler->–ü–æ–≤—Ç–æ—Ä–∏—Ç—å->–ö–∞—Ä—Ç–æ—á–∫–∏")
        if response := data.get(RepeatKey.CARDS.value, None):
            return response

    logging.info(f"User: {alice.session.user_id}: Handler->–ü–æ–≤—Ç–æ—Ä–∏—Ç—å->–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç")
    response_data = data.get("last", alice.response("–ú–Ω–µ –Ω–µ—á–µ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å"))
    if not isinstance(response_data, dict):
        response = response_data
        return response

    response = AliceResponse(
        response=response_data.get("response"),
        session=response_data.get("session"),
        session_state=response_data.get("session_state"),
        user_state_update=response_data.get("user_state_update"),
        application_state=response_data.get("application_state"),
        version=response_data.get("version")
    )
    return response


@dp.request_handler(filters.CanDoFilter(), state="*")
@mixin_appmetrica_log(dp)
@mixin_can_repeat(dp)
@mixin_state
async def handler_can_do(alice: AliceRequest, state: State, **kwargs):
    logging.info(f"User: {alice.session.user_id}: Handler->–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å")
    answer = "–ù–∞–≤—ã–∫ '–û—Ç–≥–∞–¥–∞–π —Å—Ç—Ä–∞–Ω—É —Å –¥–µ–¥—É—à–∫–æ–π' –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–±—è –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É.\n" \
             "–ü—Ä–æ–¥–≤–∏–≥–∞—è—Å—å –≤—Å–µ –¥–∞–ª—å—à–µ —Ç—ã –±—É–¥–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã.\n" \
             "–£–∑–Ω–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –ø–æ–±—ã–≤–∞–π –≤ –∫—Ä–∞—Å–∏–≤—ã—Ö –º–µ—Å—Ç–∞—Ö –∏ –ø—Ä–æ–Ω–∏–∫–Ω–∏—Å—å –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π " \
             "–¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω –≤–º–µ—Å—Ç–µ —Å –¥–µ–¥—É—à–∫–æ–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–º."

    buttons = []
    match state.current:
        case GameStates.SELECT_CARD:
            buttons.extend(REPEAT_OR_CLOSE_BUTTONS_GROUP)

        case GameStates.END:
            buttons.extend(NEW_OR_CLOSE_GAME_BUTTONS_GROUP)

        case GameStates.FACT:
            buttons.extend(CONFIRM_BUTTONS_GROUP)

        case GameStates.SHOW_CARDS:
            buttons.extend(CONFIRM_BUTTONS_GROUP)

        case _:
            buttons.extend(MENU_BUTTONS_GROUP)

    return alice.response(
        answer,
        buttons=buttons
    )


@dp.request_handler(filters.HelpFilter(), state="*")
@mixin_appmetrica_log(dp)
@mixin_can_repeat(dp)
@mixin_state
async def handler_help(alice: AliceRequest, state: State, **kwargs):
    logging.info(f"User: {alice.session.user_id}: Handler->–ü–æ–º–æ—â—å")
    answer = "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    buttons = []

    match state.current:
        case GameStates.GUESS_ANSWER:
            answer += "–ü–æ–¥—Å–∫–∞–∑–∫–∞\n" \
                      "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å\n" \
                      "–ü–æ–≤—Ç–æ—Ä–∏\n" \
                      "–ü–æ–≤—Ç–æ—Ä–∏ –≤–æ–ø—Ä–æ—Å\n" \
                      "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É"
            buttons.extend(GAME_BUTTONS_GROUP)

        case GameStates.SELECT_CARD:
            answer += "–í—ã–±–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é –∏–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É\n" \
                      "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏\n" \
                      "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É"
            buttons.extend(REPEAT_OR_CLOSE_BUTTONS_GROUP)

        case GameStates.END:
            answer += "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n" \
                      "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É"
            buttons.extend(NEW_OR_CLOSE_GAME_BUTTONS_GROUP)

        case GameStates.FACT:
            answer += "–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –∏–ª–∏ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞"
            buttons.extend(CONFIRM_BUTTONS_GROUP)

        case GameStates.SHOW_CARDS:
            answer += "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É"
            buttons.extend(CONFIRM_BUTTONS_GROUP)

        case _:
            answer += "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n" \
                      "–ß—Ç–æ-—Ç—ã —É–º–µ–µ—à—å\n" \
                      "–ü–æ–≤—Ç–æ—Ä–∏\n" \
                      "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É"
            buttons.extend(MENU_BUTTONS_GROUP)

    return alice.response(answer, buttons=buttons)


@dp.request_handler(filters.RestartFilter(), state="*")
@mixin_appmetrica_log(dp)
async def handler_restart(alice: AliceRequest, **kwargs):
    return await handler_start(alice)


@dp.request_handler(
    filters.OneOfFilter(
        filters.SessionState(GameStates.START),
        filters.SessionState(GameStates.SHOW_CARDS),
    ),
    filters.RejectFilter(),
    state="*"
)
@mixin_appmetrica_log(dp)
@mixin_can_repeat(dp)
@mixin_state
async def handler_reject_game(alice: AliceRequest, state: State, **kwargs):
    return await handler_end(alice, state=state)


@dp.request_handler(
    filters.SessionState(GameStates.START),
    state="*"
)
@mixin_appmetrica_log(dp)
@mixin_can_repeat(dp)
@mixin_state
async def handler_start_game(alice: AliceRequest, state: State, **kwargs):
    logging.info(f"User: {alice.session.user_id}: Handler->–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
    return await handler_show_cards(alice, state=state)


@dp.request_handler(
    filters.SessionState(GameStates.SHOW_CARDS),
    filters.ConfirmFilter(),
    state="*"
)
@mixin_appmetrica_log(dp)
@mixin_can_repeat(dp, RepeatKey.CARDS)
@mixin_state
async def handler_show_cards(alice: AliceRequest, state: State, **kwargs):
    await dp.storage.set_state(
        alice.session.user_id,
        GameStates.SELECT_CARD,
        alice_state=state
    )

    user = await repositories.UserRepository.get(alice.session.user_id)
    cards: list[Image] = await repositories.CardRepository.get(user)

    if not cards:
        await repositories.UserRepository.clear_passed_cards(user)
        return await handler_end(alice, state=state, true_end=True)

    interface = "screen" if alice.meta.interfaces._raw_kwargs.get("screen", False) == {} else "no_screen"
    answer: schemes.Text = SHOW_CARDS_ANSWER[interface]
    tts = "\n".join([
        answer.tts,
        *[card.title for card in cards]
    ])

    return alice.response_items_list(
        text=answer.src,
        header=answer.src,
        items=cards,
        buttons=REPEAT_OR_CLOSE_BUTTONS_GROUP,
        tts=tts
    )


@dp.request_handler(
    filters.SessionState(GameStates.SELECT_CARD),
    state="*"
)
@mixin_appmetrica_log(dp)
@mixin_can_repeat(dp)
@mixin_state
async def handler_select_card(alice: AliceRequest, state: State, **kwargs):
    user = await repositories.UserRepository.get(alice.session.user_id)
    cards = await repositories.CardRepository.get(user)
    answers = repositories.CardRepository.calculate_answers_with_index(cards)

    result = check_user_answer(alice, [
        SelectCardHandler(answers)
    ])

    if result is None or len(result) == 0:
        return await handler_all(alice, state=state)

    if isinstance(result, list):
        answer: Diff = result[0]
        state.session.selected_card = models.CardType(answer.answer)
    else:
        state.session.selected_card = result

    return await handler_question(alice, state=state)


# @dp.request_handler(
#     filters.SessionState(GameStates.QUESTION_TIME),  # NEVER REACH
#     state="*"
# )
@mixin_appmetrica_log(dp)
@mixin_can_repeat(dp, RepeatKey.QUESTION)
@mixin_state
async def handler_question(alice: AliceRequest, state: State, **kwargs):
    state.clear_after_question()

    selected_card = state.session.selected_card
    user = await repositories.UserRepository.get(alice.session.user_id)
    passed_cards = await repositories.UserRepository.get_passed_cards(
        user, selected_card
    )
    country = await repositories.CountryRepository.random(
        card_type=selected_card,
        passed_cards=passed_cards
    )

    if country is None:
        return await handler_show_cards(
            alice, state=state, extra_text="–í–æ–ø—Ä–æ—Å—ã —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å"
        )
    card = country.card

    await repositories.UserRepository.add_passed_country_card(
        user, country_id=country.id, card_type=selected_card
    )

    print(f"Country: {country.alternatives}")
    state.session.current_question = str(country.id)
    await dp.storage.set_state(
        alice.session.user_id,
        GameStates.GUESS_ANSWER,
        alice_state=state
    )

    return alice.response_big_image(
        text=card.question.src,
        tts=card.question.tts,
        image_id=card.image,
        title="",
        description=card.question.src,
        buttons=GAME_BUTTONS_GROUP
    )


@dp.request_handler(
    filters.OneOfFilter(
        filters.NextFilter(),
        filters.TextContainFilter(["—Å–ª–µ–¥—É—é—â–∏–π", "–≤–æ–ø—Ä–æ—Å"]),
        filters.TextContainFilter(["–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–≤–æ–ø—Ä–æ—Å"]),
    ),
    filters.SessionState(GameStates.GUESS_ANSWER),
    state="*"
)
@mixin_appmetrica_log(dp)
async def handler_skip_question(alice: AliceRequest):
    return await handler_show_cards(alice)


@dp.request_handler(
    filters.DontKnowFilter(),
    filters.SessionState(GameStates.GUESS_ANSWER),
    state="*"
)
@mixin_appmetrica_log(dp)
@mixin_can_repeat(dp)
@mixin_state
async def handler_dont_know_answer(alice: AliceRequest, state: State, **kwargs):
    state.session.need_hint = True
    text = choice(DONT_KNOW)
    return alice.response(
        text.src,
        tts=text.tts,
        buttons=GAME_BUTTONS_GROUP
    )


@dp.request_handler(
    filters.TextContainFilter(["–ø–æ–¥—Å–∫–∞–∑–∫–∞"]),
    filters.SessionState(GameStates.GUESS_ANSWER),
    state="*"
)
@mixin_appmetrica_log(dp)
@mixin_can_repeat(dp, RepeatKey.HINT)
@mixin_state
async def handler_hint(alice: AliceRequest, state: State, **kwargs):
    country_id = state.session.current_question

    country: models.CountryHints = await repositories.CountryRepository.get_hints(
        country_id=country_id
    )

    hints: list[schemes.AnswerWithIndex] = [
        schemes.AnswerWithIndex(index=index, text=hint)
        for index, hint in enumerate(country.hints, 1)
    ]

    hint = None
    for _hint in hints:
        if _hint.index in state.session.latest_hints:
            continue

        hint = _hint
        state.session.latest_hints.append(hint.index)
        break

    if hint is None:
        answer = choice(ALL_HINTS_IS_TAKES)
        text = "\n".join([
            answer.src, *[hint.text.src for hint in hints]
        ])
        tts = "\n".join([
            answer.tts, *[hint.text.tts for hint in hints]
        ])
        return alice.response(
            text,
            tts=tts,
            buttons=GAME_BUTTONS_GROUP
        )

    return alice.response(
        hint.text.src,
        tts=hint.text.tts,
        buttons=GAME_BUTTONS_GROUP
    )


@dp.request_handler(
    filters.SessionState(GameStates.GUESS_ANSWER),
    state="*"
)
@mixin_can_repeat(dp)
@mixin_state
async def handler_quess_answer(alice: AliceRequest, state: State):
    country_id = state.session.current_question
    selected_card = state.session.selected_card

    country = await repositories.CountryRepository.get_card_with_names(
        country_id=country_id,
        card_type=selected_card
    )

    if country is None:
        return await handler_end(alice, state=state)

    print(f"{country=}")
    possible_answers = [schemes.AnswerWithIndex(index=0, text=name) for name in country.alternatives]

    result = check_user_answer(alice, handlers=[QuessAnswerHandler(
        answers=possible_answers
    )])

    if result is None:
        if state.session.need_hint:
            # –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ—Å–ª–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if filters.ConfirmFilter().check(alice):
                state.session.need_hint = False
                return await handler_hint(alice, state=state)

            # –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ—Å–ª–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            elif filters.RejectFilter().check(alice):
                state.session.need_hint = False
                answer: schemes.Text = choice(HINT_DONT_NEED)
                return alice.response(
                    answer.src,
                    tts=answer.tts
                )

        elif filters.TextContainFilter(["–Ω–µ—Ç"]).check(alice):
            return await handler_dont_know_answer(alice, state=state)

        return await handler_false_answer(alice, state=state)

    first_country: Diff = result[0]
    if first_country.coincidence >= 0.5:
        return await handler_true_answer(alice, state=state)

    return await handler_show_cards(alice, state=state)


@mixin_appmetrica_log(dp)
@mixin_can_repeat(dp)
@mixin_state
async def handler_true_answer(alice: AliceRequest, state: State, **kwargs):
    country_id = state.session.current_question
    selected_card = state.session.selected_card
    try_count = state.session.try_count
    latest_hints = state.session.latest_hints

    user = await repositories.UserRepository.get(
        alice.session.user_id
    )
    await repositories.UserRepository.increase_score(
        user, 5 - try_count - bool(latest_hints)
    )
    country: models.CountryShortView = await repositories.CountryRepository.get_card_with_names(
        country_id=country_id,
        card_type=selected_card
    )
    card: models.Card = country.card
    answer = card.answers.correct

    await dp.storage.set_state(
        alice.session.user_id,
        GameStates.FACT,
        alice_state=state
    )

    return alice.response(
        answer.src,
        tts=answer.tts,
        buttons=CONFIRM_BUTTONS_GROUP
    )


@mixin_appmetrica_log(dp)
@mixin_can_repeat(dp)
@mixin_state
async def handler_false_answer(alice: AliceRequest, state: State, **kwargs):
    country_id = state.session.current_question
    selected_card = state.session.selected_card

    country: models.CountryShortView = await repositories.CountryRepository.get_card_with_names(
        country_id=country_id,
        card_type=selected_card
    )
    card: models.Card = country.card
    answer = card.answers.incorrect

    state.session.try_count += 1
    state.session.need_hint = True

    if state.session.try_count >= 3:
        await dp.storage.set_state(
            alice.session.user_id,
            GameStates.FACT,
            alice_state=state
        )
        # TODO: –¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å answer.incorrect
        answer = choice(INCORRECT_ANSWERS)
        country_text = INCORRECT_ANSWERS_COUNTRY[country.name]
        return alice.response(
            "\n".join([country_text.src, answer.src]),
            tts="\n".join([country_text.tts, answer.tts]),
            buttons=CONFIRM_BUTTONS_GROUP
        )

    # TODO: –ê —Ç—É—Ç INCORRECT_ANSWERS

    return alice.response(
        answer.src,
        tts=answer.tts,
        buttons=GAME_BUTTONS_GROUP
    )


@dp.request_handler(
    filters.ConfirmFilter(),
    filters.SessionState(GameStates.FACT),
    state="*")
@mixin_appmetrica_log(dp)
@mixin_can_repeat(dp)
@mixin_state
async def handler_fact_confirm(alice: AliceRequest, state: State, **kwargs):
    logging.info(f"User: {alice.session.user_id}: Handler->–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–∫—Ç–∞")

    country_id = state.session.current_question
    country: models.CountryFacts = await repositories.CountryRepository.get_facts(
        country_id=country_id
    )

    await dp.storage.set_state(
        alice.session.user_id,
        state=GameStates.SHOW_CARDS,
        alice_state=state
    )

    fact: schemes.Text = choice(country.facts)
    return alice.response(
        fact.src + "\n –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ?",
        tts=fact.tts + "\n –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ?",
        buttons=CONFIRM_BUTTONS_GROUP
    )


@dp.request_handler(
    filters.RejectFilter(),
    filters.SessionState(GameStates.FACT),
    state="*"
)
@mixin_appmetrica_log(dp)
@mixin_can_repeat(dp)
async def handler_fact_reject(alice: AliceRequest, **kwargs):
    logging.info(f"User: {alice.session.user_id}: Handler->–û—Ç–∫–∞–∑ –æ—Ç —Ñ–∞–∫—Ç–∞")
    return await handler_show_cards(alice)


@dp.request_handler(state="*")
@mixin_appmetrica_log(dp)
@mixin_state
async def handler_all(alice: AliceRequest, state: State):
    logging.info(f"User: {alice.session.user_id}: Handler->–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
    interface = "screen" if alice.meta.interfaces._raw_kwargs.get("screen", False) == {} else "no_screen"

    answer: schemes.Text
    buttons = []
    match state.current:
        case GameStates.SELECT_CARD:
            state.session.need_repeat = True
            answers = SELECT_CARD_ANYTHING_ELSE_MOMENT[interface]
            answer = choice(answers)
            buttons.extend(REPEAT_OR_CLOSE_BUTTONS_GROUP)

        case GameStates.END:
            answer = choice(END_ANYTHING_ELSE_MOMENT)
            buttons.extend(NEW_OR_CLOSE_GAME_BUTTONS_GROUP)

        case GameStates.FACT:
            answer = choice(FACT_ANYTHING_ELSE_MOMENT)
            buttons.extend(CONFIRM_BUTTONS_GROUP)

        case GameStates.SHOW_CARDS:
            answer = choice(CONTINUE_ANYTHING_ELSE_MOMENT)
            buttons.extend(CONFIRM_BUTTONS_GROUP)

        case _:
            answer = choice(REPEAT_PLEASE)
            buttons.extend(MENU_BUTTONS_GROUP)

    return alice.response(
        answer.src,
        tts=answer.tts,
        buttons=buttons
    )


@dp.errors_handler()
@mixin_appmetrica_log(dp)
async def the_only_errors_handler(alice, e):
    logging.error('An error!', exc_info=e)
    return alice.response('–ö–∞–∂–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. ')
